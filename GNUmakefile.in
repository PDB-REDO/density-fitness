# SPDX-License-Identifier: BSD-2-Clause
# 
# Copyright (c) 2020 NKI/AVL, Netherlands Cancer Institute
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

SHELL := /bin/bash

firstTarget: all

CXX					= @CXX@
CXXFLAGS			= @CXXFLAGS@ @CPPFLAGS@ @PTHREAD_CFLAGS@ @CIFPP_CFLAGS@ @ZEEP_CFLAGS@ @PDB_REDO_CFLAGS@ @CLIPPER_CFLAGS@
LDFLAGS				= @LDFLAGS@ @PTHREAD_CFLAGS@
LIBS				= @LIBS@ \
					  @CIFPP_LIBS@ \
					  @ZEEP_LIBS@ \
					  @PDB_REDO_LIBS@ \
					  @CLIPPER_LIBS@ \
					  @BOOST_PROGRAM_OPTIONS_LIB@ \
					  @BOOST_IOSTREAMS_LIB@

prefix				= @prefix@
exec_prefix			= @exec_prefix@
bindir				= @bindir@
datarootdir			= @datarootdir@
datadir				= @datadir@
mandir				= @mandir@

GNUmakefile: config.status GNUmakefile.in
	$(SHELL) ./config.status

ifneq "$(CHECK_CONFIG)" ""

config.status: configure
	$(SHELL) ./config.status --recheck

configure: configure.ac
	autoconf

endif

# main build variables
PROGRAM				= @PACKAGE_NAME@
VERSION				= @PACKAGE_VERSION@.0
DEFINES				+= VERSION='"$(VERSION)"'

CXXFLAGS            += -Wall -Wno-multichar

LIBCIFPP_DATA_DIR	= @LIBCIFPP_DATA_DIR@
LIBPDB_REDO_DATA_DIR= @LIBPDB_REDO_DATA_DIR@

# Use the DEBUG flag to build debug versions of the code
DEBUG               = @DEBUG@

ifeq "$(DEBUG)" "1"
DEFINES				+= DEBUG
CXXFLAGS            += -g -O0
LDFLAGS				+= -g
else
CXXFLAGS			+= -O2
DEFINES				+= NDEBUG
endif

MRC					= @MRC@
USE_RSRC			= @USE_RSRC@

# targets

VPATH += src:test

CXXFLAGS			+= $(DEFINES:%=-D%)

OBJDIR = obj
ifeq "$(DEBUG)" "1"
	OBJDIR	:= $(OBJDIR).dbg
endif

$(OBJDIR):
	mkdir -p $(OBJDIR)

$(OBJDIR)/%.o: %.cpp | $(OBJDIR)
	@ echo ">>" $<
	@ $(CXX) -MD -c -o $@ $< $(CFLAGS) $(CXXFLAGS)

# We have development releases and official releases, for each we
# maintain different versioning schemes.

ifneq "x@UPDATE_REVISION@" "x"

REVISION = $(shell git log --pretty=format:%h --max-count=1)
REVISION_FILE = version-info-$(REVISION).txt

$(REVISION_FILE):
	rm -f version-info-*.txt
	@ echo $(PROGRAM)-version: $(VERSION) > $@
	@ git describe --match=build --dirty >> $@
	@ git log --pretty=medium --date=iso8601 -1 >> $@

src/revision.hpp: $(REVISION_FILE)
	@ echo 'const char kRevision[] = R"(' > $@
	@ cat $? >> $@
	@ echo ')";' >> $@

else

src/revision.hpp:
	@ echo 'const char kRevision[] = R"(' > $@
	@ echo $(PROGRAM)-version: $(VERSION) >> $@
	@ echo Date:   $$(date --iso-8601) >> $@
	@ echo ')";' >> $@

endif

ifneq "$(USE_RSRC)" "0"

rsrc/version.txt: $(REVISION_FILE)
	cp $? $@

endif

# The program rules

OBJECTS = \
	$(OBJDIR)/$(PROGRAM).o

ifneq "$(USE_RSRC)" "0"

OBJECTS += $(OBJDIR)/$(PROGRAM)_rsrc.o

$(OBJDIR)/$(PROGRAM)_rsrc.o: $(LIBPDB_REDO_DATA_DIR)/bond-info.bin $(LIBCIFPP_DATA_DIR)/mmcif_pdbx_v50.cif
	$(MRC) -o $@ $^

endif

$(OBJDIR)/$(PROGRAM).o: src/revision.hpp

$(PROGRAM): $(OBJECTS)
	@ echo '->' $@
	@ $(CXX) -o $@ $^ $(CXXFLAGS) $(LDFLAGS) $(LIBS)

$(OBJDIR)/%.d: $(OBJDIR)/%.o

-include $(OBJECTS:%.o=$(OBJDIR)/%.d)

.PHONY: clean all
clean:
	rm -rf $(PROGRAM) $(OBJDIR)/* src/revision.hpp

all: $(PROGRAM)

.PHONY: install
install: $(PROGRAM)
	install -d $(bindir)
	install $(PROGRAM) $(bindir)/$(PROGRAM)
	install -d $(mandir)/man1
	install -m 644 $(PROGRAM).1 $(mandir)/man1/$(PROGRAM).1;
	gzip $(mandir)/man1/$(PROGRAM).1;

.PHONY: FORCE
FORCE:

.PHONY: test
test:
	@ echo $(OBJECTS)
